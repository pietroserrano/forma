name: Auto-publish on Develop Branch

on:
  push:
    branches: [ develop ]

jobs:
  # Check which packages have changes
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      core-changed: ${{ steps.final.outputs.core }}
      mediator-changed: ${{ steps.final.outputs.mediator }}
      decorator-changed: ${{ steps.final.outputs.decorator }}
      chains-changed: ${{ steps.final.outputs.chains }}
      pubsub-changed: ${{ steps.final.outputs.pubsub }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Detect changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          core:
            - 'src/Forma.Core/**'
            - 'Directory.Build.props'
            - 'version.json'
          mediator:
            - 'src/Forma.Mediator/**'
            - 'Directory.Build.props'
            - 'version.json'
          decorator:
            - 'src/Forma.Decorator/**'
            - 'Directory.Build.props'
            - 'version.json'
          chains:
            - 'src/Forma.Chains/**'
            - 'Directory.Build.props'
            - 'version.json'
          pubsub:
            - 'src/Forma.PubSub.InMemory/**'
            - 'Directory.Build.props'
            - 'version.json'
      continue-on-error: true
      
    - name: Fallback change detection
      if: steps.changes.outcome == 'failure'
      id: fallback
      run: |
        echo "Change detection failed, defaulting to publish all packages"
        echo "core=true" >> $GITHUB_OUTPUT
        echo "mediator=true" >> $GITHUB_OUTPUT
        echo "decorator=true" >> $GITHUB_OUTPUT
        echo "chains=true" >> $GITHUB_OUTPUT
        echo "pubsub=true" >> $GITHUB_OUTPUT
        
    - name: Set final outputs
      id: final
      run: |
        if [ "${{ steps.changes.outcome }}" = "success" ]; then
          echo "core=${{ steps.changes.outputs.core }}" >> $GITHUB_OUTPUT
          echo "mediator=${{ steps.changes.outputs.mediator }}" >> $GITHUB_OUTPUT
          echo "decorator=${{ steps.changes.outputs.decorator }}" >> $GITHUB_OUTPUT
          echo "chains=${{ steps.changes.outputs.chains }}" >> $GITHUB_OUTPUT
          echo "pubsub=${{ steps.changes.outputs.pubsub }}" >> $GITHUB_OUTPUT
        else
          echo "core=${{ steps.fallback.outputs.core }}" >> $GITHUB_OUTPUT
          echo "mediator=${{ steps.fallback.outputs.mediator }}" >> $GITHUB_OUTPUT
          echo "decorator=${{ steps.fallback.outputs.decorator }}" >> $GITHUB_OUTPUT
          echo "chains=${{ steps.fallback.outputs.chains }}" >> $GITHUB_OUTPUT
          echo "pubsub=${{ steps.fallback.outputs.pubsub }}" >> $GITHUB_OUTPUT
        fi

  # Publish Forma.Core (if changed)
  publish-core:
    needs: detect-changes
    if: needs.detect-changes.outputs.core-changed == 'true'
    uses: ./.github/workflows/nuget-publish-reusable.yml
    with:
      project-name: Forma.Core
      project-path: src/Forma.Core/Forma.Core.csproj
      run-tests: true
      test-filter: 'FullyQualifiedName~Forma.Tests.Core'
    secrets:
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      NUGET_SOURCE: ${{ secrets.NUGET_SOURCE }}

  # Publish Forma.Mediator (if changed)
  publish-mediator:
    needs: [detect-changes, publish-core]
    if: always() && needs.detect-changes.outputs.mediator-changed == 'true'
    uses: ./.github/workflows/nuget-publish-reusable.yml
    with:
      project-name: Forma.Mediator
      project-path: src/Forma.Mediator/Forma.Mediator.csproj
      run-tests: true
      test-filter: 'FullyQualifiedName~Forma.Tests.Mediator'
    secrets:
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      NUGET_SOURCE: ${{ secrets.NUGET_SOURCE }}

  # Publish Forma.Decorator (if changed)
  publish-decorator:
    needs: [detect-changes, publish-core]
    if: always() && needs.detect-changes.outputs.decorator-changed == 'true'
    uses: ./.github/workflows/nuget-publish-reusable.yml
    with:
      project-name: Forma.Decorator
      project-path: src/Forma.Decorator/Forma.Decorator.csproj
      run-tests: true
      test-filter: 'FullyQualifiedName~Forma.Tests.Decorator'
    secrets:
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      NUGET_SOURCE: ${{ secrets.NUGET_SOURCE }}

  # Publish Forma.Chains (if changed)
  publish-chains:
    needs: [detect-changes, publish-core]
    if: always() && needs.detect-changes.outputs.chains-changed == 'true'
    uses: ./.github/workflows/nuget-publish-reusable.yml
    with:
      project-name: Forma.Chains
      project-path: src/Forma.Chains/Forma.Chains.csproj
      run-tests: true
      test-filter: 'FullyQualifiedName~Forma.Tests.Chains'
    secrets:
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      NUGET_SOURCE: ${{ secrets.NUGET_SOURCE }}

  # Publish Forma.PubSub.InMemory (if changed)
  publish-pubsub:
    needs: [detect-changes, publish-core]
    if: always() && needs.detect-changes.outputs.pubsub-changed == 'true'
    uses: ./.github/workflows/nuget-publish-reusable.yml
    with:
      project-name: Forma.PubSub.InMemory
      project-path: src/Forma.PubSub.InMemory/Forma.PubSub.InMemory.csproj
      run-tests: true
      test-filter: 'FullyQualifiedName~Forma.Tests.PubSub'
    secrets:
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      NUGET_SOURCE: ${{ secrets.NUGET_SOURCE }}

  # Summary job
  summary:
    needs: [detect-changes, publish-core, publish-mediator, publish-decorator, publish-chains, publish-pubsub]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Summary
      run: |
        echo "## Develop Branch Auto-Publish Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Package | Changed | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|---------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Forma.Core | ${{ needs.detect-changes.outputs.core-changed }} | ${{ needs.publish-core.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Forma.Mediator | ${{ needs.detect-changes.outputs.mediator-changed }} | ${{ needs.publish-mediator.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Forma.Decorator | ${{ needs.detect-changes.outputs.decorator-changed }} | ${{ needs.publish-decorator.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Forma.Chains | ${{ needs.detect-changes.outputs.chains-changed }} | ${{ needs.publish-chains.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Forma.PubSub.InMemory | ${{ needs.detect-changes.outputs.pubsub-changed }} | ${{ needs.publish-pubsub.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note:** Preview versions (1.0.0-preview.X) are automatically generated for develop branch" >> $GITHUB_STEP_SUMMARY