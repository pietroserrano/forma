name: Reusable NuGet Publish Workflow

on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
        description: 'Name of the project to publish (e.g., Forma.Core)'
      project-path:
        required: true
        type: string
        description: 'Path to the project file (e.g., src/Forma.Core/Forma.Core.csproj)'
      run-tests:
        required: false
        type: boolean
        default: true
        description: 'Whether to run tests before publishing'
      test-filter:
        required: false
        type: string
        description: 'Test filter to apply (e.g., FullyQualifiedName~Forma.Tests.Core)'
    secrets:
      NUGET_API_KEY:
        required: true
      NUGET_SOURCE:
        required: false

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating tags and releases
      packages: write  # Required for publishing packages
    
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for GitVersioning
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Run tests
      if: inputs.run-tests
      run: |
        if [ -n "${{ inputs.test-filter }}" ]; then
          dotnet test --configuration Release --no-build --filter "${{ inputs.test-filter }}"
        else
          dotnet test --configuration Release --no-build
        fi
      
    - name: Pack project
      run: dotnet pack ${{ inputs.project-path }} -c Release -o packages -p:UseProjectReferences=false
      
    - name: Determine NuGet source
      id: nuget-source
      run: |
        if [ -n "${{ secrets.NUGET_SOURCE }}" ]; then
          echo "source=${{ secrets.NUGET_SOURCE }}" >> $GITHUB_OUTPUT
        else
          echo "source=https://api.nuget.org/v3/index.json" >> $GITHUB_OUTPUT
        fi
      
    - name: Push to NuGet
      run: dotnet nuget push "./packages/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source ${{ steps.nuget-source.outputs.source }} --skip-duplicate
      if: success()
      
    - name: Upload packages as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nuget-packages-${{ inputs.project-name }}
        path: packages/*.nupkg
        retention-days: 7
        
    - name: Get version from Nerdbank.GitVersioning
      id: version
      if: success()
      run: |
        # Install nbgv tool if not available
        if ! command -v nbgv &> /dev/null; then
          dotnet tool install --global nbgv
        fi
        
        # Get version information
        VERSION=$(nbgv get-version -v Version)
        ASSEMBLY_VERSION=$(nbgv get-version -v AssemblyVersion)
        PRERELEASE_VERSION=$(nbgv get-version -v PrereleaseVersion)
        
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "assembly-version=$ASSEMBLY_VERSION" >> $GITHUB_OUTPUT
        echo "prerelease-version=$PRERELEASE_VERSION" >> $GITHUB_OUTPUT
        
        echo "Detected version: v$VERSION"
        echo "Assembly version: $ASSEMBLY_VERSION"
        echo "Prerelease version: $PRERELEASE_VERSION"
        
        # Determine if this is a stable release (no prerelease suffix)
        if [ -z "$PRERELEASE_VERSION" ] || [ "$PRERELEASE_VERSION" = "" ]; then
          echo "is-stable-release=true" >> $GITHUB_OUTPUT
          echo "This is a stable release - tags and releases will be created"
        else
          echo "is-stable-release=false" >> $GITHUB_OUTPUT
          echo "This is a prerelease version - tags and pre-releases will be created"
        fi
        
    - name: Create Git tag
      if: success() && steps.version.outputs.version != ''
      run: |
        TAG_NAME="${{ steps.version.outputs.version }}"
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Check if tag already exists
        if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
          echo "Tag $TAG_NAME already exists, skipping tag creation"
        else
          echo "Creating tag $TAG_NAME"
          git tag -a "$TAG_NAME" -m "Release ${{ inputs.project-name }} $TAG_NAME"
          git push origin "$TAG_NAME"
          echo "Tag $TAG_NAME created and pushed"
        fi
        
    - name: Create GitHub Release
      if: success() && steps.version.outputs.version != ''
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        TAG_NAME="${{ steps.version.outputs.version }}"
        RELEASE_NAME="${{ inputs.project-name }} $TAG_NAME"
        
        # Check if release already exists
        if gh release view "$TAG_NAME" >/dev/null 2>&1; then
          echo "Release $TAG_NAME already exists, skipping release creation"
        else
          echo "Creating GitHub release $TAG_NAME"
          
          # Create release notes
          echo "## ${{ inputs.project-name }} $TAG_NAME" > release_notes.md
          echo "" >> release_notes.md
          if [ "${{ steps.version.outputs.is-stable-release }}" = "true" ]; then
            echo "This release contains the following package:" >> release_notes.md
          else
            echo "This pre-release contains the following package:" >> release_notes.md
          fi
          echo "- **${{ inputs.project-name }}** version ${{ steps.version.outputs.version }}" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Changes" >> release_notes.md
          echo "- Package published to NuGet" >> release_notes.md
          echo "- Automated release created by GitHub Actions" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Package Information" >> release_notes.md
          echo "- **Project**: ${{ inputs.project-name }}" >> release_notes.md
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> release_notes.md
          echo "- **Assembly Version**: ${{ steps.version.outputs.assembly-version }}" >> release_notes.md
          echo "- **Published**: \$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
          echo "" >> release_notes.md
          echo "View this package on [NuGet.org](https://www.nuget.org/packages/${{ inputs.project-name }})." >> release_notes.md

          # Create the release (with --prerelease flag for preview versions)
          if [ "${{ steps.version.outputs.is-stable-release }}" = "true" ]; then
            gh release create "$TAG_NAME" \
              --title "$RELEASE_NAME" \
              --notes-file release_notes.md \
              --latest=false
          else
            gh release create "$TAG_NAME" \
              --title "$RELEASE_NAME" \
              --notes-file release_notes.md \
              --prerelease \
              --latest=false
          fi
            
          echo "GitHub release $TAG_NAME created successfully"
        fi
